name: tests

on:
  # Temporary for testing
  push
  # pull_request:
  #   branches:
  #     - main
  #   types: [opened, reopened, synchronize]
  #   paths:
  #     - package/**

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  splunk-test:
    name: Deploy and test the TA
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        version: [9.2.5]
        # version: [9.4.1, 9.3.3, 9.2.5]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.7
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade splunk-packaging-toolkit splunk-add-on-ucc-framework

      - name: Build TA
        id: build
        run: |
          app_version=$(cat "package/app.manifest" | jq -r '.info.id.version')
          echo "app_version=${app_version}" >> $GITHUB_OUTPUT
          app_id=$(cat "package/app.manifest" | jq -r '.info.id.name')
          echo "app_id=${app_id}" >> $GITHUB_OUTPUT
          ucc-gen build --ta-version ${app_version}
          mkdir -p output/${app_id}/local
          cp etc/cicd/inputs.conf output/${app_id}/local
          chmod -R +r output
          chmod -R go-w output
        shell: bash

      - run: docker network create shared-net

      # NOTE:
      # Not having services because of: connectivity and volumes mounting
      - name: Start Mockoon container
        run: |
          docker run -d --name mockoon \
            --network shared-net \
            -v ${{ github.workspace }}/tests/genesyscloud_mock.json:/data/mockoon.json \
            -p 3004:3004 \
            mockoon/cli:latest \
            --data /data/mockoon.json --port 3004 --log-transaction

      # NOTE:
      # Splunk to be executed as root to avoid errors when toggling inputs states via REST
      - name: Start Splunk container
        env:
          SPLUNK_START_ARGS: "--answer-yes --no-prompt --accept-license"
          SPLUNK_PASSWORD: password
          GENESYSCLOUD_HOST: http://mockoon:3004
        run: |
          docker run -d --name splunk \
            --network shared-net \
            -e SPLUNK_START_ARGS="$SPLUNK_START_ARGS" \
            -e SPLUNK_PASSWORD="$SPLUNK_PASSWORD" \
            -e GENESYSCLOUD_HOST="$GENESYSCLOUD_HOST" \
            -e SPLUNK_USER="root" \
            -v ${{ github.workspace }}/etc/cicd/environment:/etc/environment
            -v ${{ github.workspace }}/output/${{ steps.build.outputs.app_id }}:/opt/splunk/etc/apps/${{ steps.build.outputs.app_id }} \
            -p 8000:8000 \
            -p 8089:8089 \
            splunk/splunk:${{ matrix.version }}
          # Wait for splunk to be up and running (~2min)
          sleep 150
          value=$(docker exec splunk printenv GENESYSCLOUD_HOST)
          echo "GENESYSCLOUD_HOST=$value"
          echo "GENESYSCLOUD_HOST=$value" >> $GITHUB_ENV
          docker exec splunk sh -c 'cat /etc/environment'

      - name: Test mockoon is alive
        run: |
          docker logs mockoon
          for i in {1..30}; do
            if curl --silent --fail http://localhost:3004/; then
              echo "Mockoon is up!"
              exit 0
            fi
            echo "Waiting for Mockoon..."
            sleep 2
          done
          echo "Mockoon failed to start"
          exit 1

      - name: Test Splunk is ready
        run: |
          EXPECTED="Ansible playbook complete, will begin streaming splunkd_stderr.log"
          docker logs splunk 2>&1 | tail -n 20 | grep -F "$EXPECTED" && echo "Found expected line near end of logs." || (echo "Expected line not found." && exit 1)

      - name: Test connectivity from Splunk to Mockoon
        run: |
          docker exec splunk curl -v http://mockoon:3004/ || echo "Failed to reach Mockoon from Splunk"

      - name: Run integration tests. [Skipping]
        run: |
          pip install -r test-requirements.txt
          # export GENESYSCLOUD_HOST="http://localhost:3004" && python -m pytest integration/*
        working-directory: ./tests

      - name: Run functional tests
        id: ftests
        env:
          GENESYSCLOUD_HOST: ${{ env.GENESYSCLOUD_HOST }}
        if: success()
        run: |
          echo "GENESYSCLOUD_HOST is: $GENESYSCLOUD_HOST"
          mkdir -p junit
          python -m pytest modinput_functional/* --junitxml=junit/test-results-${{ matrix.version }}.xml
        working-directory: ./tests

      - if: always()
        run: |
          # echo "Is there data indexed?"
          # curl --retry-delay 5 --retry 5 -f -k -u admin:password -X POST 'https://localhost:8089/services/search/v2/jobs/export' -d search="search index=genesyscloud | head 10" -d output_mode=json -d earliest_time=0 -d latest_time=now
          # echo "Test data availability"
          # curl --retry-delay 5 --retry 5 -f -k -u admin:password -X POST 'https://localhost:8089/services/search/v2/jobs/export' -d search="search index=genesyscloud sourcetype=\"genesyscloud:analytics:chats:metrics\"" -d output_mode=json -d earliest_time=0 -d latest_time=now -d | jq -e "(.result.source | contains('chat_observations://chat_observations'))"
          mkdir -p logs/
          docker logs mockoon > ${{ github.workspace }}/logs/mockoon.log 2>&1

      - name: Upload Mockoon logs
        # if: ${{ steps.ftests.conclusion == 'failure' }}
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mockoon-logs
          path: logs/mockoon.log

      - uses: dorny/test-reporter@v2
        if: always()
        with:
          name: Tests Results
          path: 'tests/junit/*.xml'
          reporter: java-junit
